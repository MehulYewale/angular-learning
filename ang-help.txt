Why AngularJS-2?
-- DEVELOP ACROSS ALL PLATFORMS -- For web, mobile web, native mobile and native desktop app.  Support SPA, offline app, animations
-- SPEED & PERFORMANCE -- Web Workers and server-side rendering. scalability, building data models on RxJS, Immutable.js or another push-model.
-- INCREDIBLE TOOLING -- Build features quickly with simple, declarative templates.Get immediate Angular-specific help and feedback with nearly every IDE and editor (intelligence)
-- WIDELY DOCUMENTED -- From prototype through global deployment, Angular delivers the productivity and scalable infrastructure that supports Google's largest applications. Lots of information on cloud

-- PRODUCTVITY -- Get intelligent code completion, instant errors, and other feedback in popular editors and IDEs.
   Angular CLI  -- Command line tools: start building fast, add components and tests, then instantly deploy,
   Angular intitive apis for animation, 
   
-- TESTING TOOLS --  Support karma & jasmine unit testing. 
   Protractor Automation tool -- end to end test framework, running in a real browser, interacting with it as a user would.
   build on NodeJS, Selenium webDriver, Jasmine, Cucumber and Mocha. (Automation testing can be possible like seleniium)
   Protractor is a NodeJS program that is written in JavaScript, so it can easily identify web elements in an Angular JS application. (In selenium little bit difficult) & much more inbuild function which is not availablle in selenium.
   But we need Selenium WebDriver and NodeJS.
   https://www.thoughtworks.com/insights/blog/testing-angularjs-apps-protractor
   
   ----------------------------------------------------------------------------------------------------
   --- Pre - Requisite
   -- familar with javascirpt -- plain javascipt with object based.
   -- TypeScript  -- is typebase javascript, code can be written as similar to java (with classes, interface)
      behind the scene it compiles & create javascript code file. (because browser only knows javascript)
   -- HTML & CSS
   
   -- System congiguration -->
   Install Node.js® and npm if they are not already on your machine.
   1. node --  it is JavaScript runtime built on Chrome's V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model (it makes javascript as serverside language & bring out of from browser to communicate with os)
    -- node -version --> 6.9.x & above (keep it as latest 8 )
   2. npm -- node package manager 
    -- npm -version --> 3.x.x and above (keep it as latest 5)
   3. Some of the global packages installation if it is missing form npm or might me needs to it in update version.
   
   -----------------------------------------------------------------------------------------------------------
   
   So What is Angular --
   	-- Angular is a framework for building client applications in HTML and either JavaScript or a language like TypeScript that compiles to JavaScript.

	-- The framework consists of several libraries, some of them core and some optional.

	-- You write Angular applications by composing HTML templates with Angularized markup, writing component classes to manage those templates, adding application logic in services, and boxing components and services in modules.
	
	-------------------------------------------------------------------------------------------------------------
	
	Modules -->  @NgModule (called typescript decorator)
	Angular apps are modular and Angular has its own modularity system called NgModules.
	Every Angular app has at least one NgModule class, the root module, conventionally named AppModule.
	And this AppModule can be divided into feature modules to maintain performance (lazy loading).
	
	import { NgModule }      from '@angular/core';
	import { BrowserModule } from '@angular/platform-browser';
	@NgModule({
	  imports:      [ BrowserModule ],
	  providers:    [ Logger ],
	  declarations: [ AppComponent ],
	  exports:      [ AppComponent ],
	  bootstrap:    [ AppComponent ]
	})
	export class AppModule { }
	
	NgModule -- NgModules help organize an application into cohesive blocks of functionality. It identifies the module's own components, directives, and pipes, making some of them public so external components can use them.
	-- Inbuild modules -- FormsModule, HttpModule, and RouterModule
	
	main.ts file for launching the app : platformBrowserDynamic().bootstrapModule(AppModule);
	----------------------------------------------------------------------------------------------------------------
	
	Component : A component controls a patch of screen called a view.
	-- You define a component's application logic—what it does to support the view—inside a class. The class interacts with the view through an API of properties and methods.
	@Component is a decorator function that specifies the Angular metadata for the component. Metadata tells Angular how to process a class. just like java annotations
	-- model-view-controller (MVC) or model-view-viewmodel (MVVM). In Angular, the component plays the part of the controller/viewmodel, and the template represents the view.
	
	import { Component } from '@angular/core';
	@Component({
	  selector: 'app-heroes',		// the components CSS element selector
	  templateUrl: './heroes.component.html',	// the location of the component's template file/ component view.
	  styleUrls: ['./heroes.component.css']		// he location of the component's private CSS styles.
	})
	export class HeroesComponent {	}
	
	import { Component } from '@angular/core';
	@Component({
	  selector: 'app-heroes',		// the components CSS element selector
	  template: '<h1>{{title}}</h1>',	// that will be templates to render with component .
	  styleUrls: ['./heroes.component.css']		// he location of the component's private CSS styles.
	})
	export class HeroesComponent { 
		private title: string = "Welcome";	
		 constructor() { }
	}
	
	--------------------------------------------------------------------------------------------------------------
	
	Data binding : model to view or view to model data bindings
	-- Data binding plays an important role in communication between a template and its component.
	
	1. Interpolation -- {{ obj.id }}   -- model to view <--
	2. Property binding -- [value]	-- model to view <--
	3. Event Bindingg -- (click)  -- view to model -->
	4. Two way data binding -- [(ng-model)]="value"  -- view to model and model to view  <-- value -->
	  -- <input [(ngModel)]="hero.name"> // only form elements.. how we change view
	  -- Angular processes all data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components. (Dirty checking with angular1)
	-- [target]="expression"  ===> bind-target="expression"
	-- (target)="expression"  ===> on-target="expression"
	-- [(target)]="expression"  ===> bindon-target="expression"
	-- When setting an element property to a non-string data value, you must use property binding. (maintains datatype)
	-- interpolation and property binding can set only properties, not attributes. (eg : colspan is attribute)
	-- Attribute binding : [attr.colspan]="2"
	  
    -- Data binding is also important for communication between parent and child components. 
	
	-------------------------------------------------------------------------------------------------------------
	
	
	Component Interaction -:   communication between parent and child components. 
		1. Pass data from parent to child with input binding --  @Input('master') masterName: string;  --  <my-div [master]="master">
		2. Intercept input property changes with ngOnChanges()  -- ngOnChanges of child component will execute if any input property got changed  -- ngOnChanges(changes: SimpleChange) 
		
		3. Parent listens for child event --   (onVoted)="onVoted($event)" -- @Output() onVoted = new EventEmitter<boolean>();   --  this.onVoted.emit(true);  // it will call parent class method onVoted
		4. Parent interacts with child via local variable  --  But limited to access only for template itself
			 You can do both by creating a template reference variable for the child element and then reference that variable within the parent template 

		  <button (click)="timer.stop()">Stop</button>  // calling child components method
		  <app-countdown-timer #timer></app-countdown-timer>   //child components
		  
		  -- template reference variable --> #fax == ref-fax.  the scope of this variable wiil be entire template

		5. Parent calls an @ViewChild() in component (to solve above problem)  -- 
		 -- @ViewChild(CountdownTimerComponent) private timerComponent: CountdownTimerComponent   -- child component needs to inject in parent
		 --  start() { this.timerComponent.start();  //calling child components method }

		6. Parent and children communicate via a service  --  Create service file & inject in both components
		 -- A parent component and its children share a service whose interface enables bi-directional communication within the family. (Recommended one)
		 
		 -- with observable or simple getters & setters of class
		 
---------------------------------------------------------------------------------------------------------------------

   Directives : Directives allow you to attach behavior to elements in the DOM..
   -- Angular templates are dynamic. When Angular renders them, it transforms the DOM according to the instructions given by directives.
   -- A directive is a class with a @Directive decorator. A component is a directive-with-a-template; a @Component decorator is actually a @Directive decorator extended with template-oriented features.
   
   There are three kinds of directives in Angular:
   
	1. Components— this directives with a only have template.
	2. Structural directives—change the DOM layout by adding. removing and manupulation DOM elements.(*ngFor,*ngIf)
	-- Recognize by An asterisk (*) precedes the directive
	-- You can apply many attribute directives to one host element. You can only apply one structural directive to a host element.
	3. Attribute directives—change the appearance or behavior of an element, component, or another directive.(ngStyle, ngClass)
	
	import { Directive } from '@angular/core';
	@Directive({
	  selector: '[appHighlight]'   // It's the brackets ([]) that make it an attribute selector
	})
	export class HighlightDirective {
	  constructor() { }
	}
	
	@Directive({ 
	  selector?: string
	  inputs?: string[]
	  outputs?: string[]
	  host?: {[key: string]: string}
	  providers?: Provider[]
	  exportAs?: string
	  queries?: {[key: string]: any}
	})

	-- instead of host property above-- 
	@HostListener('mouseenter') onMouseEnter() {
	  this.highlight(this.highlightColor || 'red');
	}

------------------------------------------------------------------------------------------------------------------
 
 Services : Reusable code across all components. Components are big consumers of services. Component classes should be lean. Singleton object shared across the module or components depending upon it's injection.
 Registering at a component level means you get a new instance of the service with each new instance of that component.
 
   LoggerService -:
   @Injector()
	export class LoggerService {
	  log(msg: any)   { console.log(msg); }
	  error(msg: any) { console.error(msg); }
	  warn(msg: any)  { console.warn(msg); }
	}
	
------------------------------------------------------------------------------------------------------------------

 Dependency injection : 
 -- Dependency injection is a way to supply a new instance of a class with the fully-formed dependencies it requires. 
 Most dependencies are services. Angular uses dependency injection to provide new components with the services they need.
 -- Angular can tell which services a component needs by looking at the types of its constructor parameters.
 -- constructor(private logger: LoggerService) { }
 -- When Angular creates a component, it first asks an injector for the services that the component requires.
 -- A provider is something that can create or return a service, typically the service class itself. You can register providers in modules or in components.
 -- In general, add providers to the root module so that the same instance of a service is available everywhere.
 -- Registering at a component level means you get a new instance of the service with each new instance of that component.
-------------------------------------------------------------------------------------------------------------------

Change Detection & Angular life cycle hooks :
-- Angular executes template expressions// Data-binidngs after every change detection cycle. Change detection cycles are triggered by many asynchronous activities such as promise 
	resolutions, http results, timer, events, keypresses and mouse moves.
-- Angular looks for changes to data-bound values through a change detection process that runs after every DOM event: every keystroke, mouse move, timer tick, and server response
-- Angular builds and maintains a tree of "change detectors". There is one such change detector (class) per component/directive. (You can get access to this 
   object by injecting ChangeDetectorRef.) These change detectors are created when Angular creates components. They keep track of the state of all of your bindings,
   for dirty checking. These are, in a sense, similar to the automatic $watches() that Angular 1 would set up for {{}} template bindings.
-- Angular uses Zone.js to create its own zone (NgZone), which monkey-patches all asynchronous events (browser DOM events, timeouts, AJAX/XHR). This is how 
	change detection is able to automatically run after each asynchronous event.
-------------------------------------------------------------------------------------------------------------------

Lifecycle hooks : A component has a lifecycle managed by Angular. 
-- Angular creates it, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM.
-- A directive has the same set of lifecycle hooks, minus the hooks that are specific to component content and views.
LIFECYCLE SEQUENCE :  
 -- constructor --  all the dependency injections will be placed here so that before creating component instance, instance propertise get initilized
 -- ngOnChanges() -- Respond when Angular (re)sets data-bound input properties. The method receives a SimpleChanges object of current and previous property values. Called before ngOnInit() and whenever one or more data-bound input properties change.
 -- ngOnInit() -- it call only once after data-bound propertise set (after first ngOnChanges call)
   -- To perform complex initializations shortly after construction.
   -- To set up the component after Angular sets the input properties.
 -- ngDoCheck() --  after every run of change detection -- like angular first $scope.digest(); (custom change detection) -- Detect and act upon changes that Angular can't or won't detect on its own. Called during every change detection run, immediately after ngOnChanges() and ngOnInit().
 -- ngOnDestroy() -- Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers, Stop interval timers, Unregister all callbacks to avoid memory leaks. Called just before Angular destroys the directive/component.
 
 There are also component specific hooks (rarely used):  Sequenced
 -- ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked
 ---------------------------------------------------------------------------------------------------------------------
 
 

	
	
   	
	
   
   
   
   


